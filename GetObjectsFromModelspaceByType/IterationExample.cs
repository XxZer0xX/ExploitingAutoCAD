#region Referenceing

using System;
using System.Collections.Generic;
using System.Linq;
using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.Runtime;

#endregion

namespace GetObjectsFromModelspaceByType
{
    public class IterationExample
    {
        public static IEnumerable<ObjectId> GetIdsByTypeIteration(params Type[] types)
        {
            // We will use this Delegate to return the Class of the RXObject(Entity)
            Func<Type, RXClass> getClass = RXObject.GetClass;

            // Make a HashSet of the Types of Entities we want to get from the modelspace.
            var acceptableTypes = new HashSet<RXClass>(

                // Use a little linq with a method group to iterate through the array
                types.Select(getClass));

            var doc = Application.DocumentManager.MdiActiveDocument;
            // Create a transaction to grab the modelspace. Here you can use a regular transaction
            // "TransactionManager.StartTransaction()". I prefer StartOpenClose out of habit
            // because its a bit faster.
            using (var trans = doc.TransactionManager.StartOpenCloseTransaction())
            {
                var modelspace =
                    // Here we utilize "SymbolUtilityServices" to get the Modelspace id from our database.
                    (BlockTableRecord)
                        trans.GetObject(SymbolUtilityServices.GetBlockModelSpaceId(doc.Database), OpenMode.ForRead);

                // We use a little more linq to cast the IEnumerable object and iterate thru its ObjectIds
                // we will check our hashset contains the RXClass of the ObjectId by accessing the "ObjectClass" 
                // property of the RXObject.
                var ids = modelspace.Cast<ObjectId>().Where(id => acceptableTypes.Contains(id.ObjectClass));

                // Commit the transaction.
                trans.Commit();
                return ids;
            }
        }
    }
}