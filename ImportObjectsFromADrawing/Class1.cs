using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.Customization;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.EditorInput;
using Autodesk.AutoCAD.Runtime;

namespace ImportObjectsFromADrawing
{
    public class Class1
    {
        [CommandMethod("editcuix")]
        public void editcui()
        {
            string mainCui = Application.GetSystemVariable("MENUNAME") + ".cui";
            CustomizationSection cs = new CustomizationSection(mainCui);
            var cust = cs.CustomizationSection;
            cust.
        }

        [CommandMethod("ImportFromDwg")]
        public void CommandMethod()
        {

        }

        
        public void ImportObjects<T>(string drawingPath, params T[] matchArgs)
        {
            using (var sourceDatabase = new Database(false, true))
            {
                // Read the DWG into a side database
                sourceDatabase.ReadDwgFile(drawingPath, System.IO.FileShare.Read, true, "");

                // Create a variable to store the list of block identifiers
                ObjectIdCollection blockIds = new ObjectIdCollection();

                using (var trans = sourceDatabase.TransactionManager.StartOpenCloseTransaction())
                {
                    // Open the block table
                    var blockTable = (BlockTable)trans.GetObject(sourceDatabase.BlockTableId, OpenMode.ForRead, false);

                    // Check each block in the block table
                    foreach (var btrId in blockTable)
                    {
                        using (var btr = (BlockTableRecord)trans.GetObject(btrId, OpenMode.ForRead, false))

                            // Only add named & non-layout blocks to the copy list
                            if (!btr.IsAnonymous && !btr.IsLayout)
                                blockIds.Add(btrId);
                    }
                    trans.Commit();
                }

                var doc = Application.DocumentManager.MdiActiveDocument;

                // Copy blocks from source to destination database
                sourceDatabase.WblockCloneObjects(blockIds,
                    doc.Database.BlockTableId,
                    new IdMapping(),
                    DuplicateRecordCloning.Replace,
                    false);

            }
        }
    }
}
